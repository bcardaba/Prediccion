library(ggplot2)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
IngresosApple <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
head(IngresosApple)
raw_data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
rawVentas = raw_data$Ingresos
rawDate = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(raw_data)
library(tidyverse)
library(readr)
library(dplyr)
library(skimr)
library(here) # Comentar
library(janitor) # Clean names
library(magrittr) # Pipe operators
library(corrplot) # Correlations
library(ggcorrplot)  # Correlations
library(PerformanceAnalytics) # Correlations
library(ggplot2)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
raw_data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
rawVentas = raw_data$Ingresos
rawDate = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(raw_data)
xVentas = xts(rawVentas,order.by = rawDate)
View(xVentas)
xts_Ventas = xts(Ventas,order.by = Date)
data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Ventas = _data$Ingresos
data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Ventas = data$Ingresos
Date = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(data)
xts_Ventas = xts(Ventas,order.by = Date)
xts_Ventas = to.quarterly(xts_Ventas)
xts_Ventas = to.quarterly(xts_Ventas)
head(xts_Ventas)
zVentas=as.zoo(xts_Ventas$xts_Ventas.Close)
autoplot(zVentas)+ggtitle("Primas Trimestrales Mapfre")+xlab("Trimestres")+ylab("Primas")
autoplot(zVentas)+ggtitle("Ventas Trimestrales Aplle")+xlab("Trimestres")+ylab("Ingresos")
autoplot(zVentas)+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")+ylab("Ingresos")
ggfreqplot(as.ts(zVentas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Ventas Trimestrales")
# creo una muestra, empiezo en el primer elemento y finalizo 4 elementos antes
muestra <- window(zVentas, start = index(zVentas[1]), end = index(zVentas[length(zVentas) - 4]))
# selecciono automaticamente el ets
etsfit <- ets(muestra)
# prediccion del modelo
ForePrimas <- forecast(etsfit)
# selecciono automaticamente el ets
etsfit <- ets(muestra)
# prediccion del modelo
ets_forecast<- forecast(etsfit)
# selecciono automaticamente el ets
ets_fit <- ets(muestra)
# prediccion del modelo
ets_forecast <- forecast(ets_fit)
summary(ets_forecast)
plot(ets_forecast)
lines(window(zVentas),type = "o")
# creo una muestra que contiene todos los elementos menos los cuatro últimos
#Select number of observation to compare forecast
cOmit=4
#Data Size
nObs=length(zVentas)
muestra <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
fit1 <- ses(muestra)
fit1 <- ses(muestra)
fit1$model
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit, method = "A,Ad,A")
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
matrix(c(fventas.ets$mean[1:4], zVentas[(length(zVentas) - 5):length(zVentas)]), ncol = 2,
dimnames = list(c("2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
matrix(c(fventas.ets$mean[1:4], zVentas[(length(zVentas) - 5):length(zVentas)]), ncol = 2,
dimnames = list(c("2017 Q1","2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
matrix(c(fventas.ets$mean[1:4], zVentas[(length(zVentas) - 5):length(zVentas)]), ncol = 2,
dimnames = list(c("2017 Q1","2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
matrix(c(fventas.ets$mean[1:4], zVentas[(length(zVentas) - 5):length(zVentas)]), ncol = 2,
dimnames = list(c("2017 Q1","2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
matrix(c(fventas.ets$mean[1:4], zVentas[(length(zVentas) - 5):length(zVentas)]), ncol = 2,
dimnames = list(c("2017 Q1","2017 Q2", "2017 Q3", "2017 Q4"), c("Predicho", "Real")))
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)
etsfit<-ets(window(tsVentas,end=2016+3/4))
etsfit<-ets(window(tsVentas,end=2016))
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit, model = "A,Ad,A")
#Results
summary(fventas.ets)
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit, model = A,Ad,A)
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit, model = "A", "Ad" ,"A")
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit, model = "A", "A" ,"A")
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit, model = A, A ,A)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(dplyr)
library(skimr)
library(here) # Comentar
library(janitor) # Clean names
library(magrittr) # Pipe operators
library(corrplot) # Correlations
library(ggcorrplot)  # Correlations
library(PerformanceAnalytics) # Correlations
library(ggplot2)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Ventas = data$Ingresos
Date = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(data)
xts_Ventas = xts(Ventas,order.by = Date)
head(xts_Ventas)
xts_Ventas = to.quarterly(xts_Ventas)
zVentas = as.zoo(xts_Ventas$xts_Ventas.Close)
autoplot(zVentas)+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")+ylab("Ingresos")
# dibujamos los valores por cada trimestre para ver como varían
ggfreqplot(as.ts(zVentas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Ventas Trimestrales")
# creo una muestra que contiene todos los elementos menos los cuatro últimos
#Select number of observation to compare forecast
cOmit=4
#Data Size
nObs=length(zVentas)
muestra <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)
View(raw_data)
# creo una muestra que contiene todos los elementos menos los cuatro últimos
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
muestra <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
plot(stl(as.ts(zVentas)[, 1], s.window = "periodic"))
plot(stl(as.ts(zVentas)[, 1], s.window = "periodic"), main = "Componentes")
plot(fventas.ets)
lines(window(zVentas),type="o")
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)
# selecciono automaticamente el arima
arimafit <- auto.arima(muestra, lambda = 0)
# visualizo el arima
summary(arimafit)
# selecciono automaticamente el arima
fit_arima <- auto.arima(muestra, lambda = 0)
# visualizo el arima
summary(fit_arima)
ggtsdisplay(fit_arima$residuals)
Box.test(fit_arima$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 12, fitdf = 1, type = "Lj")
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
ForePrimasArima <- forecast(fit_arima)
summary(ForePrimasArima)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.5) + ggtitle("ARIMA: Predicción primas seguros")
# selecciono automaticamente el arima
fit_arima <- auto.arima(muestra)
# visualizo el arima
summary(fit_arima)
ggtsdisplay(fit_arima$residuals)
Box.test(fit_arima$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 12, fitdf = 1, type = "Lj")
ForePrimasArima <- forecast(fit_arima)
summary(ForePrimasArima)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.5) + ggtitle("ARIMA: Predicción primas seguros")
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(ForePrimasArima,alpha = 0.4) + ggtitle("ARIMA: Predicción primas seguros")
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(Fventas.arima,alpha = 0.4) + ggtitle("ARIMA: Predicción Ventas de Apple")
Fventas.arima <- forecast(fit_arima) # aplicamos fc al modelo arima elegido
# visulaizamos los resultados de la predicción
summary(Fventas.arima)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(Fventas.arima,alpha = 0.4) + ggtitle("ARIMA: Predicción Ventas de Apple")
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(Fventas.arima,alpha = 0.4) + ggtitle("ARIMA: Predicción Ventas de Apple")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(dplyr)
library(skimr)
library(here) # Comentar
library(janitor) # Clean names
library(magrittr) # Pipe operators
library(corrplot) # Correlations
library(ggcorrplot)  # Correlations
library(PerformanceAnalytics) # Correlations
library(ggplot2)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Ventas = data$Ingresos
Date = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(data)
xts_Ventas = xts(Ventas,order.by = Date)
head(xts_Ventas)
xts_Ventas = to.quarterly(xts_Ventas)
zVentas = as.zoo(xts_Ventas$xts_Ventas.Close)
autoplot(zVentas)+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")+ylab("Ingresos")
# dibujamos los valores por cada trimestre para ver como varían
ggfreqplot(as.ts(zVentas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Ventas Trimestrales")
plot(stl(as.ts(zVentas)[, 1], s.window = "periodic"), main = "Componentes")
# creo una muestra que contiene todos los elementos menos los tres últimos
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
muestra <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)
# la fórmula auto.arima selecciona el mejor modelo ARIMA
fit_arima <- auto.arima(muestra) # no indico el lambda para que escoja el más adecuado, utilizo la muestra que deja fuera a los valores de 2017
# visualizo el arima
summary(fit_arima)
ggtsdisplay(fit_arima$residuals)
Box.test(fit_arima$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 12, fitdf = 1, type = "Lj")
Fventas.arima <- forecast(fit_arima) # aplicamos fc al modelo arima elegido
# visulaizamos los resultados de la predicción
summary(Fventas.arima)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(Fventas.arima,alpha = 0.4) + ggtitle("ARIMA: Predicción Ventas de Apple")
checkresiduals(etsfit)
checkresiduals(arimafit)
View(fit_arima)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(dplyr)
library(skimr)
library(here) # Comentar
library(janitor) # Clean names
library(magrittr) # Pipe operators
library(corrplot) # Correlations
library(ggcorrplot)  # Correlations
library(PerformanceAnalytics) # Correlations
library(ggplot2)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Ventas = data$Ingresos
Date = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(data)
xts_Ventas = xts(Ventas,order.by = Date)
head(xts_Ventas)
xts_Ventas = to.quarterly(xts_Ventas)
zVentas = as.zoo(xts_Ventas$xts_Ventas.Close)
autoplot(zVentas)+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")+ylab("Ingresos")
# dibujamos los valores por cada trimestre para ver como varían
ggfreqplot(as.ts(zVentas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Ventas Trimestrales")
plot(stl(as.ts(zVentas)[, 1], s.window = "periodic"), main = "Componentes")
# creo una muestra que contiene todos los elementos menos los tres últimos
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
muestra <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)
# la fórmula auto.arima selecciona el mejor modelo ARIMA
arimafit <- auto.arima(muestra) # no indico el lambda para que escoja el más adecuado, utilizo la muestra que deja fuera a los valores de 2017
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Box.test(arimafit$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 1, type = "Lj")
Fventas.arima <- forecast(arimafit) # aplicamos fc al modelo arima elegido
# visulaizamos los resultados de la predicción
summary(Fventas.arima)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(Fventas.arima,alpha = 0.4) + ggtitle("ARIMA: Predicción Ventas de Apple")
checkresiduals(etsfit)
checkresiduals(arimafit)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(dplyr)
library(skimr)
library(here) # Comentar
library(janitor) # Clean names
library(magrittr) # Pipe operators
library(corrplot) # Correlations
library(ggcorrplot)  # Correlations
library(PerformanceAnalytics) # Correlations
library(ggplot2)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Ventas = data$Ingresos
Date = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(data)
xts_Ventas = xts(Ventas,order.by = Date)
head(xts_Ventas)
xts_Ventas = to.quarterly(xts_Ventas)
zVentas = as.zoo(xts_Ventas$xts_Ventas.Close)
autoplot(zVentas)+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")+ylab("Ingresos")
# dibujamos los valores por cada trimestre para ver como varían
ggfreqplot(as.ts(zVentas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Ventas Trimestrales")
plot(stl(as.ts(zVentas)[, 1], s.window = "periodic"), main = "Componentes")
# creo una muestra que contiene todos los elementos menos los tres últimos
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
muestra <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
etsfit<-ets(muestra)
#forecast model
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)
# la fórmula auto.arima selecciona el mejor modelo ARIMA
arimafit <- auto.arima(muestra) # no indico el lambda para que escoja el más adecuado, utilizo la muestra que deja fuera a los valores de 2017
# visualizo el arima
summary(arimafit)
ggtsdisplay(arimafit$residuals)
Box.test(arimafit$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(arimafit$residuals,lag = 12, fitdf = 1, type = "Lj")
Fventas.arima <- forecast(arimafit) # aplicamos fc al modelo arima elegido
# visulaizamos los resultados de la predicción
summary(Fventas.arima)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(Fventas.arima,alpha = 0.4) + ggtitle("ARIMA: Predicción Ventas de Apple")
checkresiduals(etsfit)
checkresiduals(arimafit)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(dplyr)
library(skimr)
library(here) # Comentar
library(janitor) # Clean names
library(magrittr) # Pipe operators
library(corrplot) # Correlations
library(ggcorrplot)  # Correlations
library(PerformanceAnalytics) # Correlations
library(ggplot2)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
data <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Ventas = data$Ingresos
Date = seq(as.Date("2008/04/01"),as.Date("2017/07/01"), by = "quarter")
head(data)
xts_Ventas = xts(Ventas,order.by = Date)
head(xts_Ventas)
xts_Ventas = to.quarterly(xts_Ventas)
zVentas = as.zoo(xts_Ventas$xts_Ventas.Close)
autoplot(zVentas)+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")+ylab("Ingresos")
# dibujamos los valores por cada trimestre para ver como varían
ggfreqplot(as.ts(zVentas), freq = 4, nrow = 1, facet.labeller = c("1T","2T","3T","4T")) +
ggtitle("Ventas Trimestrales")
plot(stl(as.ts(zVentas)[, 1], s.window = "periodic"), main = "Componentes")
# creo una muestra que contiene todos los elementos menos los tres últimos
#Select number of observation to compare forecast
cOmit=3
#Data Size
nObs=length(zVentas)
muestra <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
fit_ets<-ets(muestra)
#forecast model
fventas.ets=forecast(fit_ets)
#Results
summary(fventas.ets)
plot(fventas.ets)
lines(window(zVentas),type="o")
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)
# la fórmula auto.arima selecciona el mejor modelo ARIMA
fit_arima <- auto.arima(muestra) # no indico el lambda para que escoja el más adecuado, utilizo la muestra que deja fuera a los valores de 2017
# visualizo el arima
summary(fit_arima)
ggtsdisplay(fit_arima$residuals)
Box.test(fit_arima$residuals,lag = 3, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 6, fitdf = 1, type = "Lj")
Box.test(fit_arima$residuals,lag = 12, fitdf = 1, type = "Lj")
Fventas.arima <- forecast(fit_arima) # aplicamos fc al modelo arima elegido
# visulaizamos los resultados de la predicción
summary(Fventas.arima)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new) + geom_point(aes(x = time, y = value)) + geom_line(aes(x = time,y = value)) +
geom_forecast(Fventas.arima,alpha = 0.4) + ggtitle("ARIMA: Predicción Ventas de Apple")
checkresiduals(fit_ets)
checkresiduals(fit_arima)
fets <- function(x, h) {
forecast(ets(x), h = h)
}
farima <- function(x, h) {
forecast(auto.arima(x), h = h)
}
checkresiduals(fit_ets)
checkresiduals(fit_arima)
View(data)
a1 <- fit_arima %>% forecast(h = 4*(2016-2008)+1) %>%
accuracy(qcement)
a1 <- fit_arima %>% forecast(h = 4*(2016-2008)+1) %>%
accuracy(data)
plot(fventas.ets)
lines(window(zVentas))
plot(fventas.ets)
lines(window(zVentas),type="o")
