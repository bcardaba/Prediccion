#funciones
archTest <- function(rtn,m=10){
# Perform Lagrange Multiplier Test for ARCH effect of a time series
# rtn: time series
# m: selected AR order
# TSAY(2013)
y=(rtn-mean(rtn))^2
T=length(rtn)
atsq=y[(m+1):T]
x=matrix(0,(T-m),m)
for (i in 1:m){
x[,i]=y[(m+1-i):(T-i)]
}
md=lm(atsq~x)
summary(md)
}
#Yahoo ticker (stock or index)
sSymbol="BMW"
#get data from yahoo
mData<-getSymbols(sSymbol ,from="2014-01-01",to="2020-11-25",auto.assign=FALSE)
#Define workdata
xData=Ad(mData)
View(xData)
#Yahoo ticker (stock or index)
sSymbol="BMW"
#get data from yahoo
mData<-getSymbols(sSymbol ,from="2014-01-01",to="2020-11-25",auto.assign=FALSE)
#Define workdata
BMW_data=Ad(mData) # datos ajustados
#Calculate Daily Arithmetic Return
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(dRentCont)
#Calculate Daily Arithmetic Return
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
#Calculate Daily Arithmetic Return
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
plot.zoo(cbind(BMW_data,BMW_dRentCont),main=paste(sSymbol," y Rentabilidad"),xlab="años",ylab=c("Precio","rentabilidad"
grid(lwd=2)
#Calculate Daily Arithmetic Return
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
plot.zoo(cbind(xData,dRentCont),main=paste(sSymbol," y  Rentabilidad"),xlab="años",ylab=c("Precio","rentabilidad"))
#Calculate Daily Arithmetic Return
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
plot.zoo(cbind(BMW_data,BMW_dRentCont),main=paste(sSymbol," y  Rentabilidad"),xlab="años",ylab=c("Precio","rentabilidad"))
grid(lwd=2)
#Volatilidad GARCH
#Plot return squared
plot.zoo(cbind(Ad(mData),BMW_dRentCont,BMW_dRentCont^2),main=paste(sSymbol," y  Rentabilidad"),xlab="años",ylab=c("Precio","rentabilidad","Volatilidad"))
#testing mean
t.test(BMW_dRentCont)
#ACF & PACF
# VolProxy=abs(dRentCont) # absolute value
VolProxy=BMW_dRentCont^2 #squared
#ACF & PACF
# VolProxy=abs(dRentCont) # absolute value
VolProxy=BMW_dRentCont^2 #squared
#ACF y PACF
tsdisplay(VolProxy)
#Ljung-Box Test
Box.test(VolProxy,lag=10,  type="Lj")
Box.test(VolProxy,lag=20,  type="Lj")
Box.test(VolProxy,lag=40,  type="Lj")
#LM test
archTest(BMW_dRentCont,20)
#ARCH(1)
m1=garchFit(~1+garch(1,0),data=BMW_dRentCont,trace=F) # Fit an ARCH(1) model
summary(m1)
resi=residuals(m1,standardize=T) #residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
tsdisplay(resi^2) #acf pacf residuals
#GARCH(1,1)
m2=garchFit(~1+garch(1,1),data=dRentCont,trace=F) # Fit an GARCH(1,1) model
#GARCH(1,1)
m2=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F) # Fit an GARCH(1,1) model
summary(m2)
resi=residuals(m2,standardize=T) #residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
tsdisplay(resi^2) #acf pacf residuals
plot(m2)
#t-student
m3=garchFit(~1+garch(1,1),data=dRentCont,trace=F,cond.dist="std")
#t-student
m3=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F,cond.dist="std")
summary(m3)
plot(m3)
#t-student
m3=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F,cond.dist="std")
summary(m3)
plot(m3)
v1=volatility(m3) # Obtain volatility
v1=xts(v1,order.by=index(BMW_dRentCont)) # volatility as XTS
plot(sqrt(252)*v1)
resi=residuals(m3,standardize=T) # Standardized residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) # Standardized residuals as XTS
tsdisplay(resi^2) #acf pacf residuals
plot(resi)
predict(m3) #forecast volatility
predict(m3, n.ahead = 10, plot=TRUE, crit_val=2) #plot with 2*standard error
predict(m3,n.ahead=20,plot=TRUE,conf=.9,nx=100) # plot 100 data with 90% confidence
BWM=getSymbols("BMW.DE",env=NULL)
Volkwagen=getSymbols("VOW3",env=NULL)
BWM=getSymbols("BMW",env=NULL)
Volkwagen=getSymbols("VOW3",env=NULL)
BWM=getSymbols("BMW",env=NULL)
Volkwagen=getSymbols("VOW",env=NULL)
BWM=getSymbols("BMW",env=NULL)
Volkwagen=getSymbols("VOW3",env=NULL)
library(quantmod)
library(vars)
install.packages("vars")
BWM=getSymbols("BMW",env=NULL)
Volkwagen=getSymbols("VOW",env=NULL)
BWM=getSymbols("BMW",from="2014-01-01",to="2020-11-25",env=NULL)
Volkwagen=getSymbols("VOW",from="2014-01-01",to="2020-11-25",env=NULL)
View(Volkwagen)
# Generar rentabilidad mensual
rBMW=monthlyReturn(BMW[,6])
BMW=getSymbols("BMW",from="2014-01-01",to="2020-11-25",env=NULL)
Volkwagen=getSymbols("VOW",from="2014-01-01",to="2020-11-25",env=NULL)
# Generar rentabilidad mensual
rBMW=monthlyReturn(BMW[,6])
rVOW=monthlyReturn(Volkwagen[,6])
View(rBMW)
#generar vector
vY=cbind(rtef,ribex)
#generar vector
vY=cbind(rBMW,rVOW)
colnames(vY)=c("BMW","VOW")
vY=na.omit(vY)
#Seleccionar modelo
VARselect(vY)
library(quantmod)
library(vars)
#Seleccionar modelo
VARselect(vY)
#estimar
model.var=VAR(vY)
summary(model.var)
model.var1=VAR(vY,type="none")
summary(model.var1)
#causalidad de granger
causality(model.var1)
#respuesta al impulso
model.ri=irf(model.var1)
model.ri
plot(model.ri)
##prediccion
predict(model.var1, n.ahead = 8, ci = 0.95)
#Yahoo ticker (stock or index)
sSymbol="BMW"
#get data from yahoo
mData<-getSymbols(sSymbol ,from="2014-01-01",to="2020-11-23",auto.assign=FALSE)
#Define workdata
BMW_data=Ad(mData) # datos ajustados
library("quantmod") #Package to download financials historical data
library(forecast)
library("fGarch")
#funciones
archTest <- function(rtn,m=10){
# Perform Lagrange Multiplier Test for ARCH effect of a time series
# rtn: time series
# m: selected AR order
# TSAY(2013)
y=(rtn-mean(rtn))^2
T=length(rtn)
atsq=y[(m+1):T]
x=matrix(0,(T-m),m)
for (i in 1:m){
x[,i]=y[(m+1-i):(T-i)]
}
md=lm(atsq~x)
summary(md)
}
#Yahoo ticker (stock or index)
sSymbol="BMW"
#get data from yahoo
mData<-getSymbols(sSymbol ,from="2014-01-01",to="2020-11-23",auto.assign=FALSE)
#Define workdata
BMW_data=Ad(mData) # datos ajustados
#Calculate Daily Arithmetic Return
# Indicamos que nos interesan los datos diarios
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
plot.zoo(cbind(BMW_data,BMW_dRentCont),main=paste(sSymbol," y  Rentabilidad"),xlab="años",ylab=c("Precio","rentabilidad"))
grid(lwd=2)
View(BMW_data)
#Yahoo ticker (stock or index)
sSymbol="BMW.DE"
#get data from yahoo
mData<-getSymbols(sSymbol ,from="2014-01-01",to="2020-11-23",auto.assign=FALSE)
#Define workdata
BMW_data=Ad(mData) # datos ajustados
View(BMW_data)
#Calculate Daily Arithmetic Return
# Indicamos que nos interesan los datos diarios
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
plot.zoo(cbind(BMW_data,BMW_dRentCont),main=paste(sSymbol," y  Rentabilidad"),xlab="años",ylab=c("Precio","rentabilidad"))
grid(lwd=2)
#Volatilidad GARCH
#Plot return squared
plot.zoo(cbind(Ad(mData),BMW_dRentCont,BMW_dRentCont^2),main=paste(sSymbol," y  Rentabilidad"),xlab="años",ylab=c("Precio","rentabilidad","Volatilidad"))
#testing mean
t.test(BMW_dRentCont)
#testing mean
t.test(BMW_dRentCont)
#ACF & PACF
# VolProxy=abs(dRentCont) # absolute value
VolProxy=BMW_dRentCont^2 #squared
#ACF y PACF
tsdisplay(VolProxy)
#Ljung-Box Test
Box.test(VolProxy,lag=10,  type="Lj")
Box.test(VolProxy,lag=20,  type="Lj")
Box.test(VolProxy,lag=40,  type="Lj")
#LM test
archTest(BMW_dRentCont,20)
#ARCH(1)
m1=garchFit(~1+garch(1,0),data=BMW_dRentCont,trace=F) # Fit an ARCH(1) model
summary(m1)
resi=residuals(m1,standardize=T) #residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
tsdisplay(resi^2) #acf pacf residuals
#GARCH(1,1)
m2=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F) # Fit an GARCH(1,1) model
summary(m2)
resi=residuals(m2,standardize=T) #residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
tsdisplay(resi^2) #acf pacf residuals
plot(m2)
#t-student
m3=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F,cond.dist="std")
summary(m3)
plot(m3)
#t-student
m3=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F,cond.dist="std")
summary(m3)
plot(m3)
v1=volatility(m3) # Obtain volatility
v1=xts(v1,order.by=index(BMW_dRentCont)) # volatility as XTS
plot(sqrt(252)*v1)
resi=residuals(m3,standardize=T) # Standardized residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) # Standardized residuals as XTS
tsdisplay(resi^2) #acf pacf residuals
plot(resi)
predict(m3) #forecast volatility
predict(m3, n.ahead = 10, plot=TRUE, crit_val=2) #plot with 2*standard error
predict(m3,n.ahead=20,plot=TRUE,conf=.9,nx=100) # plot 100 data with 90% confidence
BMW=getSymbols("BMW.DE",from="2014-01-01",to="2020-11-25",env=NULL)
Volkwagen=getSymbols("VOW.DE",from="2014-01-01",to="2020-11-25",env=NULL)
# Generar rentabilidad mensual
rBMW=monthlyReturn(BMW[,6])
rVOW=monthlyReturn(Volkwagen[,6])
#generar vector
vY=cbind(rBMW,rVOW)
colnames(vY)=c("BMW","VOW")
vY=na.omit(vY)
#Seleccionar modelo
VARselect(vY)
#estimar
model.var=VAR(vY)
summary(model.var)
model.var1=VAR(vY,type="none")
summary(model.var1)
#causalidad de granger
causality(model.var1)
#respuesta al impulso
model.ri=irf(model.var1)
model.ri
plot(model.ri)
##prediccion
predict(model.var1, n.ahead = 8, ci = 0.95)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library("quantmod") #Package to download financials historical data
library(forecast)
library("fGarch")
#funciones
archTest <- function(rtn,m=10){
# Perform Lagrange Multiplier Test for ARCH effect of a time series
# rtn: time series
# m: selected AR order
# TSAY(2013)
y=(rtn-mean(rtn))^2
T=length(rtn)
atsq=y[(m+1):T]
x=matrix(0,(T-m),m)
for (i in 1:m){
x[,i]=y[(m+1-i):(T-i)]
}
md=lm(atsq~x)
summary(md)
}
#Yahoo ticker (stock or index)
sSymbol="BMW.DE"
#get data from yahoo
mData<-getSymbols(sSymbol ,from="2014-01-01",to="2020-11-23",auto.assign=FALSE)
#Define workdata
BMW_data=Ad(mData) # datos ajustados
#Calculate Daily Arithmetic Return
# Indicamos que nos interesan los datos diarios
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
#Volatilidad GARCH
#Plot return squared
plot.zoo(cbind(Ad(mData),BMW_dRentCont,BMW_dRentCont^2),main=paste(sSymbol,"  Rentabilidad y Volatilidad"),xlab="años",ylab=c("Precio","rentabilidad","Volatilidad"))
#testing mean
t.test(BMW_dRentCont)
View(BMW_dRentCont)
#testing mean
summary(BMW_dRentCont)
t.test(BMW_dRentCont)
#ACF & PACF
# VolProxy=abs(dRentCont) # absolute value
VolProxy=BMW_dRentCont^2 #squared
#ACF y PACF
ggtsdisplay(VolProxy)
#Ljung-Box Test
Box.test(VolProxy,lag=10,  type="Lj")
Box.test(VolProxy,lag=20,  type="Lj")
Box.test(VolProxy,lag=40,  type="Lj")
#LM test
archTest(BMW_dRentCont,20)
#ARCH(1)
m1=garchFit(~1+garch(1,0),data=BMW_dRentCont,trace=F) # Fit an ARCH(1) model
summary(m1)
resi=residuals(m1,standardize=T) #residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
tsdisplay(resi^2) #acf pacf residuals
#GARCH(1,1)
m2=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F) # Fit an GARCH(1,1) model
summary(m2)
resi=residuals(m2,standardize=T) #residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
tsdisplay(resi^2) #acf pacf residuals
plot(m2)
#t-student
m3=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F,cond.dist="std")
summary(m3)
plot(m3)
v1=volatility(m3) # Obtain volatility
v1=xts(v1,order.by=index(BMW_dRentCont)) # volatility as XTS
plot(sqrt(252)*v1)
resi=residuals(m3,standardize=T) # Standardized residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) # Standardized residuals as XTS
tsdisplay(resi^2) #acf pacf residuals
plot(resi)
predict(m3) #forecast volatility
predict(m3, n.ahead = 10, plot=TRUE, crit_val=2) #plot with 2*standard error
predict(m3,n.ahead=20,plot=TRUE,conf=.9,nx=100) # plot 100 data with 90% confidence
BMW=getSymbols("BMW.DE",from="2014-01-01",to="2020-11-25",env=NULL)
Volkwagen=getSymbols("VOW.DE",from="2014-01-01",to="2020-11-25",env=NULL)
# Generar rentabilidad mensual
rBMW=monthlyReturn(BMW[,6])
rVOW=monthlyReturn(Volkwagen[,6])
#generar vector
vY=cbind(rBMW,rVOW)
colnames(vY)=c("BMW","VOW")
vY=na.omit(vY)
#Seleccionar modelo
VARselect(vY)
library(quantmod)
library(vars)
#Seleccionar modelo
VARselect(vY)
#estimar
model.var=VAR(vY)
summary(model.var)
model.var1=VAR(vY,type="none")
summary(model.var1)
#Seleccionar modelo
VARselect(vY)
#estimar
model.var=VAR(vY)
summary(model.var)
model.var1=VAR(vY,type="none")
summary(model.var1)
#causalidad de granger
causality(model.var1)
#respuesta al impulso
model.ri=irf(model.var1)
model.ri
plot(model.ri)
##prediccion
predict(model.var1, n.ahead = 8, ci = 0.95)
##prediccion
predict(model.var1, n.ahead = 8, ci = 0.95)
#respuesta al impulso
model.ri=irf(model.var1)
model.ri
plot(model.ri)
#causalidad de granger
causality(model.var1)
0
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
##prediccion
predict(model.var1, n.ahead = 8, ci = 0.95)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
library("quantmod") #Package to download financials historical data
library(forecast)
library("fGarch")
#funciones
archTest <- function(rtn,m=10){
# Perform Lagrange Multiplier Test for ARCH effect of a time series
# rtn: time series
# m: selected AR order
# TSAY(2013)
y=(rtn-mean(rtn))^2
T=length(rtn)
atsq=y[(m+1):T]
x=matrix(0,(T-m),m)
for (i in 1:m){
x[,i]=y[(m+1-i):(T-i)]
}
md=lm(atsq~x)
summary(md)
}
#Yahoo ticker (stock or index)
sSymbol="BMW.DE"
#get data from yahoo
mData<-getSymbols(sSymbol ,from="2014-01-01",to="2020-11-23",auto.assign=FALSE)
#Define workdata
BMW_data=Ad(mData) # datos ajustados
#Calculate Daily Arithmetic Return
# Indicamos que nos interesan los datos diarios
BMW_dRentCont=dailyReturn(BMW_data,type='log',leading=FALSE)
#Exclude NA (First data)
BMW_dRentCont=na.exclude(BMW_dRentCont)
#Volatilidad GARCH
#Plot return squared
plot.zoo(cbind(Ad(mData),BMW_dRentCont,BMW_dRentCont^2),main=paste(sSymbol,"  Rentabilidad y Volatilidad"),xlab="años",ylab=c("Precio","rentabilidad","Volatilidad"))
#testing mean
t.test(BMW_dRentCont)
#ACF & PACF
# VolProxy=abs(dRentCont) # absolute value
VolProxy=BMW_dRentCont^2 #squared
#ACF y PACF
ggtsdisplay(VolProxy)
#Ljung-Box Test
Box.test(VolProxy,lag=10,  type="Lj")
Box.test(VolProxy,lag=20,  type="Lj")
Box.test(VolProxy,lag=40,  type="Lj")
#LM test
archTest(BMW_dRentCont,20)
#ARCH(1)
m1=garchFit(~1+garch(1,0),data=BMW_dRentCont,trace=F) # Fit an ARCH(1) model
summary(m1)
resi=residuals(m1,standardize=T) #residuals
resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
tsdisplay(resi^2) #acf pacf residuals
#GARCH(1,1)
m2=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F) # Fit an GARCH(1,1) model
summary(m2)
#resi=residuals(m2,standardize=T) #residuals
#resi=xts(resi,order.by=index(BMW_dRentCont)) #residuals as xts
#tsdisplay(resi^2) #acf pacf residuals
#plot(m2)
#t-student
#m3=garchFit(~1+garch(1,1),data=BMW_dRentCont,trace=F,cond.dist="std")
#summary(m3)
#plot(m3)
#v1=volatility(m3) # Obtain volatility
#v1=xts(v1,order.by=index(BMW_dRentCont)) # volatility as XTS
#plot(sqrt(252)*v1)
#resi=residuals(m3,standardize=T) # Standardized residuals
#resi=xts(resi,order.by=index(BMW_dRentCont)) # Standardized residuals as XTS
#tsdisplay(resi^2) #acf pacf residuals
#plot(resi)
#predict(m3) #forecast volatility
#predict(m3, n.ahead = 10, plot=TRUE, crit_val=2) #plot with 2*standard error
#predict(m3,n.ahead=20,plot=TRUE,conf=.9,nx=100) # plot 100 data with 90% confidence
library(quantmod)
library(vars)
BMW=getSymbols("BMW.DE",from="2014-01-01",to="2020-11-25",env=NULL)
Volkwagen=getSymbols("VOW.DE",from="2014-01-01",to="2020-11-25",env=NULL)
# Generar rentabilidad mensual
rBMW=monthlyReturn(BMW[,6])
rVOW=monthlyReturn(Volkwagen[,6])
#generar vector
vY=cbind(rBMW,rVOW)
colnames(vY)=c("BMW","VOW")
vY=na.omit(vY)
#Seleccionar modelo
VARselect(vY)
#estimar
model.var=VAR(vY)
summary(model.var)
model.var1=VAR(vY,type="none")
summary(model.var1)
#causalidad de granger
causality(model.var1)
#respuesta al impulso
model.ri=irf(model.var1)
model.ri
plot(model.ri)
